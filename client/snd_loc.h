/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*/
// snd_loc.h -- private sound functions

#ifdef OGG_SUPPORT
#include "include/vorbisfile.h" // Knightmare added- vorbis support
#include "include/altypes.h"
#include "snd_ogg.h"
#endif

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	Sint32			left;
	Sint32			right;
} portable_samplepair_t;

typedef struct
{
	Sint32 		length;
	Sint32 		loopstart;
	Sint32 		speed;			// not needed, because converted on load?
	Sint32 		width;
	Sint32 		stereo;
	qboolean	music;
	byte		data[1];		// variable sized
} sfxcache_t;

typedef struct sfx_s
{
	char 		name[MAX_QPATH];
	Sint32			registration_sequence;
	sfxcache_t	*cache;
	char 		*truename;
} sfx_t;

// added from Q2E
typedef struct {
	char				introName[MAX_QPATH];
	char				loopName[MAX_QPATH];
	char				ambientName[MAX_QPATH];
	qboolean			looping;
	qboolean			ambient_looping;
#ifdef OGG_DIRECT_FILE
	FILE				*file;
#else
	fileHandle_t		file;
#endif
	Sint32					start;
	Sint32					rate;
	Sint32					width;
	Sint32					channels;
	unsigned			format;
	void				*vorbisFile;
} bgTrack_t;

// a playsound_t will be generated by each call to S_StartSound,
// when the mixer reaches playsound->begin, the playsound will
// be assigned to a channel
typedef struct playsound_s
{
	struct playsound_s	*prev, *next;
	sfx_t		*sfx;
	float		volume;
	float		attenuation;
	Sint32			entnum;
	Sint32			entchannel;
	qboolean	fixed_origin;	// use origin field instead of entnum's origin
	vec3_t		origin;
	unsigned	begin;			// begin on this sample
} playsound_t;

typedef struct
{
	Sint32			channels;
	Sint32			samples;				// mono samples in buffer
	Sint32			submission_chunk;		// don't mix less than this #
	Sint32			samplepos;				// in mono samples
	Sint32			samplebits;
	Sint32			speed;
	byte		*buffer;
} dma_t;

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	sfx_t		*sfx;			// sfx number
	Sint32			leftvol;		// 0-255 volume
	Sint32			rightvol;		// 0-255 volume
	Sint32			end;			// end time in global paintsamples
	Sint32 		pos;			// sample position in sfx
	Sint32			looping;		// where to loop, -1 = no looping OBSOLETE?
	Sint32			entnum;			// to allow overriding a specific sound
	Sint32			entchannel;		//
	vec3_t		origin;			// only use if fixed_origin is set
	vec_t		dist_mult;		// distance multiplier (attenuation/clipK)
	Sint32			master_vol;		// 0-255 master volume
	qboolean	fixed_origin;	// use origin instead of fetching entnum's origin
	qboolean	autosound;		// from an entity->sound, cleared each frame
#ifdef OGG_SUPPORT
	qboolean	streaming;
#endif
} channel_t;

typedef struct
{
	Sint32			rate;
	Sint32			width;
	Sint32			channels;
	Sint32			loopstart;
	Sint32			samples;
	Sint32			dataofs;		// chunk starts this many bytes from file start
} wavinfo_t;


/*
====================================================================

  SYSTEM SPECIFIC FUNCTIONS

====================================================================
*/

// initializes cycling through a DMA buffer and returns information on it
qboolean SNDDMA_Init(void);

// gets the current DMA position
Sint32		SNDDMA_GetDMAPos(void);

// shutdown the DMA xfer.
void	SNDDMA_Shutdown(void);

void	SNDDMA_BeginPainting (void);

void	SNDDMA_Submit(void);

//====================================================================

#define	MAX_CHANNELS	64	//<- CDawg changed, was 32
extern	channel_t   channels[MAX_CHANNELS];

extern	Sint32		paintedtime;
extern	Sint32		s_rawend;
extern	vec3_t	listener_origin;
extern	vec3_t	listener_forward;
extern	vec3_t	listener_right;
extern	vec3_t	listener_up;
extern	dma_t	dma;
extern	playsound_t	s_pendingplays;

#define	MAX_RAW_SAMPLES	8192
extern	portable_samplepair_t	s_rawsamples[MAX_RAW_SAMPLES];

extern cvar_t	*s_volume;
extern cvar_t	*s_nosound;
extern cvar_t	*s_loadas8bit;
extern cvar_t	*s_khz;
extern cvar_t	*s_show;
extern cvar_t	*s_mixahead;
extern cvar_t	*s_testsound;
extern cvar_t	*s_primary;
#ifdef OGG_SUPPORT
extern cvar_t	*s_musicvolume; // Q2E
#endif

wavinfo_t GetWavinfo (char *name, byte *wav, Sint32 wavlength);

void S_InitScaletable (void);

sfxcache_t *S_LoadSound (sfx_t *s);

void S_IssuePlaysound (playsound_t *ps);

void S_PaintChannels(Sint32 endtime);

// picks a channel based on priorities, empty slots, number of channels
channel_t *S_PickChannel(Sint32 entnum, Sint32 entchannel);

// spatializes a channel
void S_Spatialize(channel_t *ch);
